window.serverUrl=null;window.chainId=null;window.gasLimit=1000000;function getERC20(){var abi='[{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}],"name":"Transfer","type":"event"},{"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"totalSupply","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]';return abi};function getNFT(){var abi='[{"inputs":[{"internalType":"address","name":"feeAddresses","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"string[]","name":"us","type":"string[]"},{"internalType":"uint256[2]","name":"a","type":"uint256[2]"},{"internalType":"uint256[2][2]","name":"b","type":"uint256[2][2]"},{"internalType":"uint256[2]","name":"c","type":"uint256[2]"},{"internalType":"uint256[1]","name":"input","type":"uint256[1]"}],"name":"addNFTs","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"m","type":"uint256"}],"name":"changeFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getAuthor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"verify","type":"address"},{"internalType":"uint256","name":"maxLimit","type":"uint256"}],"name":"initNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"hash","type":"uint256"}],"name":"isUsedHash","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"tokensOfOwner","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"addresses","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"transferNFTs","outputs":[],"stateMutability":"nonpayable","type":"function"}]';return abi};function getESCROW(){var abi='[{"inputs":[{"internalType":"address","name":"feeAddresses","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"nftContract","type":"address"},{"internalType":"uint256","name":"boxId","type":"uint256"}],"name":"buyNFTBox","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"m1","type":"uint256"},{"internalType":"uint256","name":"m2","type":"uint256"}],"name":"changeFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"boxId","type":"uint256"}],"name":"getAmountsBox","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBoxLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDeleteBoxIds","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"boxId","type":"uint256"}],"name":"getNFTContractBox","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"boxId","type":"uint256"}],"name":"getOwnerBox","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"nftContract","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getSellingBoxIdOfTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSellingBoxIds","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"getSellingBoxIdsOfOwner","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"boxId","type":"uint256"}],"name":"getTokenAddressBox","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"boxId","type":"uint256"}],"name":"getTokenIdsBox","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"transfer","type":"address"}],"name":"initNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"nftContract","type":"address"},{"internalType":"uint256","name":"boxId","type":"uint256"}],"name":"pullNFTBox","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"nftContract","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"sellNFTBox","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"boxId","type":"uint256"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"setOrderBox","outputs":[],"stateMutability":"payable","type":"function"}]';return abi};function Pxsdk(){};Pxsdk.prototype={ethContract:"",ethTransferBoxContract:"",ethEscrowBoxContract:"",ethXNFTBoxContract:"",tokenList:[],};Pxsdk.prototype.updateContracts=function(contracts){this.__proto__.ethContract=contracts.ethContract?contracts.ethContract:'';this.__proto__.ethTransferBoxContract=contracts.ethTransferContract?contracts.ethTransferContract:'';this.__proto__.ethEscrowBoxContract=contracts.ethEscrowContract?contracts.ethEscrowContract:'';this.__proto__.ethXNFTBoxContract=contracts.ethXNFTContract?contracts.ethXNFTContract:'';this.__proto__.tokenList=contracts.tokenList?contracts.tokenList:[]};Pxsdk.prototype.getContractNFTBOX=function(contractToken){if(web3.eth==undefined||web3.currentProvider==undefined){console.log("web3 error");return}var _contract=new web3.eth.Contract(JSON.parse(getNFTBOX()));_contract.options.address=contractToken;return _contract};Pxsdk.prototype.getContractESCROWBOX=function(contractToken){if(web3.eth==undefined||web3.currentProvider==undefined){console.log("web3 error");return}var _contract=new web3.eth.Contract(JSON.parse(getESCROWBOX()));_contract.options.address=contractToken;return _contract};Pxsdk.prototype.getContractESCROW=function(contractToken){if(web3.eth==undefined||web3.currentProvider==undefined){console.log("web3 error");return}var _contract=new web3.eth.Contract(JSON.parse(getESCROW()));_contract.options.address=contractToken;return _contract};Pxsdk.prototype.getFromAddress=function(){return window.fromAddress};Pxsdk.prototype.isStrEqualWithoutCase=function isStrEqualWithoutCase(str1,str2){if(str1==null||str1==undefined){str1=''}if(str2==null||str2==undefined){str2=''}return str1.toLowerCase()==str2.toLowerCase()};Pxsdk.prototype.getBalance=function(toAddress,callback){try{if(web3.eth==undefined||web3.currentProvider==undefined){console.log("web3 error");return}web3.eth.getBalance(toAddress).then((result)=>{callback(null,web3.utils.fromWei(result,"ether")*1)})}catch(e){callback(e)}};Pxsdk.prototype.getOwnerOfNFT=function(tokenId,callback){try{var fromAddress=Pxsdk.getFromAddress();var _contract=Pxsdk.getContractNFT(Pxsdk.ethXNFTContract);_contract.methods.ownerOf(tokenId).call({from:fromAddress}).then((result)=>{callback(null,result)})}catch(e){callback(e)}};Pxsdk.prototype.getOwnerOfNFTs=function(tokenId,callback){try{var fromAddress=Pxsdk.getFromAddress();var _contract=Pxsdk.getContractNFTBOX(Pxsdk.ethXNFTContract);_contract.methods.balanceOf(fromAddress,tokenId).call({from:fromAddress}).then((result)=>{callback(null,result)})}catch(e){callback(e)}};Pxsdk.prototype.getOwnerOfNFTBox=function(boxId,callback){try{var fromAddress=Pxsdk.getFromAddress();var _contract=Pxsdk.getContractESCROWBOX(Pxsdk.ethEscrowBoxContract);_contract.methods.getOwnerBox(boxId).call({from:fromAddress}).then((result)=>{callback(null,result)})}catch(e){callback(e)}};Pxsdk.prototype.getSellingBoxIdOfTokenId=function(tokenId,callback){try{var fromAddress=Pxsdk.getFromAddress();var _contract=Pxsdk.getContractESCROWBOX(Pxsdk.ethEscrowBoxContract);_contract.methods.getSellingBoxIdOfTokenId(Pxsdk.ethXNFTBoxContract,tokenId).call({from:fromAddress}).then((result)=>{callback(null,result)})}catch(e){callback(e)}};Pxsdk.prototype.getSellingBoxIdsOfOwner=function(owner,callback){try{var fromAddress=Pxsdk.getFromAddress();var _contract=Pxsdk.getContractESCROWBOX(Pxsdk.ethEscrowBoxContract);_contract.methods.getSellingBoxIdsOfOwner(owner).call({from:fromAddress}).then((result)=>{callback(null,result)})}catch(e){callback(e)}};Pxsdk.prototype.getSellingBoxIds=function(callback){try{var fromAddress=Pxsdk.getFromAddress();var _contract=Pxsdk.getContractESCROWBOX(Pxsdk.ethEscrowBoxContract);_contract.methods.getSellingBoxIds().call({from:fromAddress}).then((result)=>{callback(null,result)})}catch(e){callback(e)}};Pxsdk.prototype.getNFTContractBox=function(boxId,callback){try{var fromAddress=Pxsdk.getFromAddress();var _contract=Pxsdk.getContractESCROWBOX(Pxsdk.ethEscrowBoxContract);_contract.methods.getNFTContractBox(boxId).call({from:fromAddress}).then((result)=>{callback(null,result)})}catch(e){callback(e)}};Pxsdk.prototype.getApproveOrderBox=function(tokenAddress,amount,callback){try{var fromAddress=Pxsdk.getFromAddress();if(tokenAddress==Pxsdk.ethContract){callback(null)}else{var _contract=Pxsdk.getContractERC20(tokenAddress);_contract.methods.allowance(fromAddress,Pxsdk.ethTransferBoxContract).call({from:fromAddress}).then((result)=>{if(result*1>=amount*1){callback(null)}else{if(result*1>0){callback("not enough approve");return}callback("no approve")}})}}catch(e){callback(e)}};Pxsdk.prototype.approveOrderBox=function(tokenAddress,amount,isClear,callback){try{var fromAddress=Pxsdk.getFromAddress();Pxsdk.getBalanceEth(fromAddress,function(err,data){if(err){callback(err);return}web3.eth.getTransactionCount(fromAddress).then((result)=>{var _nonce=web3.utils.toHex(result);var _contract=Pxsdk.getContractERC20(tokenAddress);_contract.methods.balanceOf(fromAddress).call({from:fromAddress}).then((result)=>{if(result*1>=amount*1){web3.eth.getGasPrice().then((result)=>{var _gasPrice=result;if(data*1>=web3.utils.fromWei(window.gasLimit*_gasPrice+"","ether")*1){var _data={from:fromAddress,to:tokenAddress,gasPrice:web3.utils.toHex(_gasPrice),gas:web3.utils.toHex(window.gasLimit),data:_contract.methods.approve(Pxsdk.ethTransferBoxContract,(isClear)?0:amount).encodeABI(),nonce:_nonce,value:0};Pxsdk.sendTransaction(_data,callback)}else{callback("not enough eth")}})}else{callback("not enough token")}})})})}catch(e){callback(e)}};Pxsdk.prototype.setOrderBox=function(boxId,tokenAddress,amount,callback){try{var fromAddress=Pxsdk.getFromAddress();var func=function(fromAddress,boxId,val,amount){Pxsdk.getBalanceEth(fromAddress,function(err,data){if(err){callback(err);return}web3.eth.getTransactionCount(fromAddress).then((result)=>{var _nonce=web3.utils.toHex(result);var _contract=Pxsdk.getContractESCROWBOX(Pxsdk.ethEscrowBoxContract);web3.eth.getGasPrice().then((result)=>{var _gasPrice=result;if(data*1>=web3.utils.fromWei((window.gasLimit*_gasPrice+val*1)+"","ether")*1){var _data={from:fromAddress,to:Pxsdk.ethEscrowBoxContract,gasPrice:web3.utils.toHex(_gasPrice),gas:web3.utils.toHex(window.gasLimit),data:_contract.methods.setOrderBox(boxId,tokenAddress,(val>0)?val:amount).encodeABI(),nonce:_nonce,value:(val>0)?web3.utils.toHex(val):0};Pxsdk.sendTransaction(_data,callback)}else{callback("not enough eth")}})})})};if(tokenAddress==Pxsdk.ethContract){func(fromAddress,boxId,amount,0)}else{var _contract=Pxsdk.getContractERC20(tokenAddress);_contract.methods.allowance(fromAddress,Pxsdk.ethTransferBoxContract).call({from:fromAddress}).then((result)=>{if(result*1>=amount*1){func(fromAddress,boxId,0,amount)}else{callback("no approve")}})}}catch(e){callback(e)}};Pxsdk.prototype.getOwnerBox=function(boxId,callback){try{var fromAddress=Pxsdk.getFromAddress();var _contract=Pxsdk.getContractESCROWBOX(Pxsdk.ethEscrowBoxContract);_contract.methods.getOwnerBox(boxId).call({from:fromAddress}).then((result)=>{callback(null,result)})}catch(e){callback(e)}};Pxsdk.prototype.getTokenIdsBox=function(boxId,callback){try{var fromAddress=Pxsdk.getFromAddress();var _contract=Pxsdk.getContractESCROWBOX(Pxsdk.ethEscrowBoxContract);_contract.methods.getTokenIdsBox(boxId).call({from:fromAddress}).then((result)=>{callback(null,result)})}catch(e){callback(e)}};Pxsdk.prototype.getTokenAddressBox=function(boxId,callback){try{var fromAddress=Pxsdk.getFromAddress();var _contract=Pxsdk.getContractESCROWBOX(Pxsdk.ethEscrowBoxContract);_contract.methods.getTokenAddressBox(boxId).call({from:fromAddress}).then((result)=>{callback(null,result)})}catch(e){callback(e)}};Pxsdk.prototype.getTokenIdsOfNFTBox=function(boxId,callback){try{var fromAddress=Pxsdk.getFromAddress();var _contract=Pxsdk.getContractESCROWBOX(Pxsdk.ethEscrowBoxContract);_contract.methods.getTokenIdsBox(boxId).call({from:fromAddress}).then((result)=>{callback(null,result)})}catch(e){callback(e)}};Pxsdk.prototype.getApproveBuyNFTBox=function(boxId,callback){try{var fromAddress=Pxsdk.getFromAddress();Pxsdk.getOwnerOfNFTBox(boxId,function(err,result){if(err){callback(err);return}if(result!=Pxsdk.ethContract){var _contract=Pxsdk.getContractESCROWBOX(Pxsdk.ethEscrowBoxContract);_contract.methods.getAmountsBox(boxId).call({from:fromAddress}).then((result)=>{var _amount=0;for(var i=0;i<result.length;i++){_amount+=result[i]*1}_contract.methods.getTokenAddressBox(boxId).call({from:fromAddress}).then((result)=>{if(result==Pxsdk.ethContract){callback(null)}else{var _contract=Pxsdk.getContractERC20(result);_contract.methods.allowance(fromAddress,Pxsdk.ethTransferBoxContract).call({from:fromAddress}).then((result)=>{if(result*1>=_amount*1){callback(null)}else{if(result*1>0){callback("not enough approve");return}callback("no approve")}})}})})}else{callback("no escrow")}})}catch(e){callback(e)}};Pxsdk.prototype.getApproveSellNFTs=function(tokenIds,idx,callback){try{Pxsdk.getOwnerOfNFTs(tokenIds[idx],function(err,result){if(err){callback(err);return}if(result==1){idx++;if(idx>=tokenIds.length){callback(null)}else{Pxsdk.getApproveSellNFTs(tokenIds,idx,callback)}}else{callback("no owner:"+tokenIds[idx])}})}catch(e){callback(e)}};Pxsdk.prototype.getApproveSellNFTBox=function(tokenIds,callback){try{var fromAddress=Pxsdk.getFromAddress();Pxsdk.getApproveSellNFTs(tokenIds,0,function(err,result){if(err){callback(err);return}var _contract=Pxsdk.getContractNFTBOX(Pxsdk.ethXNFTContract);_contract.methods.isApprovedForAll(fromAddress,Pxsdk.ethEscrowBoxContract).call({from:fromAddress}).then((result)=>{if(result){callback(null)}else{callback("no approve")}})})}catch(e){callback(e)}};Pxsdk.prototype.approveBuyNFTBox=function(boxId,isClear,callback){try{var fromAddress=Pxsdk.getFromAddress();Pxsdk.getOwnerOfNFTBox(boxId,function(err,result){if(err){callback(err);return}if(result!=Pxsdk.ethContract){Pxsdk.getBalanceEth(fromAddress,function(err,data){if(err){callback(err);return}web3.eth.getTransactionCount(fromAddress).then((result)=>{var _nonce=web3.utils.toHex(result);var _contract=Pxsdk.getContractESCROWBOX(Pxsdk.ethEscrowBoxContract);_contract.methods.getAmountsBox(boxId).call({from:fromAddress}).then((result)=>{var _amount=0;for(var i=0;i<result.length;i++){_amount+=result[i]*1}_contract.methods.getTokenAddressBox(boxId).call({from:fromAddress}).then((result)=>{if(result==Pxsdk.ethContract){callback("approve error")}else{var _token=result;var _contract=Pxsdk.getContractERC20(_token);_contract.methods.balanceOf(fromAddress).call({from:fromAddress}).then((result)=>{if(result*1>=_amount*1){web3.eth.getGasPrice().then((result)=>{var _gasPrice=result;if(data*1>=web3.utils.fromWei(window.gasLimit*_gasPrice+"","ether")*1){var _data={from:fromAddress,to:_token,gasPrice:web3.utils.toHex(_gasPrice),gas:web3.utils.toHex(window.gasLimit),data:_contract.methods.approve(Pxsdk.ethTransferBoxContract,(isClear)?0:_amount).encodeABI(),nonce:_nonce,value:0};Pxsdk.sendTransaction(_data,callback)}else{callback("not enough eth")}})}else{callback("not enough token")}})}})})})})}else{callback("no escrow")}})}catch(e){callback(e)}};Pxsdk.prototype.approveSellNFTBox=function(tokenIds,callback){try{var fromAddress=Pxsdk.getFromAddress();Pxsdk.getApproveSellNFTs(tokenIds,0,function(err,result){if(err){callback(err);return}Pxsdk.getBalanceEth(fromAddress,function(err,data){if(err){callback(err);return}web3.eth.getTransactionCount(fromAddress).then((result)=>{var _nonce=web3.utils.toHex(result);var _contract=Pxsdk.getContractNFTBOX(Pxsdk.ethXNFTContract);web3.eth.getGasPrice().then((result)=>{var _gasPrice=result;if(data*1>=web3.utils.fromWei(window.gasLimit*_gasPrice+"","ether")*1){var _data={from:fromAddress,to:Pxsdk.ethXNFTContract,gasPrice:web3.utils.toHex(_gasPrice),gas:web3.utils.toHex(window.gasLimit),data:_contract.methods.setApprovalForAll(Pxsdk.ethEscrowBoxContract,true).encodeABI(),nonce:_nonce,value:0};Pxsdk.sendTransaction(_data,callback)}else{callback("not enough eth")}})})})})}catch(e){callback(e)}};Pxsdk.prototype.transferNFT=function(toAddress,tokenId,callback){try{var fromAddress=Pxsdk.getFromAddress();var func=function(owner,fromAddress,toAddress,tokenId){Pxsdk.getBalanceEth(fromAddress,function(err,data){if(err){callback(err);return}web3.eth.getTransactionCount(fromAddress).then((result)=>{var _nonce=web3.utils.toHex(result);var _contract=Pxsdk.getContractNFT(Pxsdk.ethXNFTContract);web3.eth.getGasPrice().then((result)=>{var _gasPrice=result;if(data*1>=web3.utils.fromWei(window.gasLimit*_gasPrice+"","ether")*1){var _data={from:fromAddress,to:Pxsdk.ethXNFTContract,gasPrice:web3.utils.toHex(_gasPrice),gas:web3.utils.toHex(window.gasLimit),data:_contract.methods.safeTransferFrom(owner,toAddress,tokenId).encodeABI(),nonce:_nonce,value:0};Pxsdk.sendTransaction(_data,callback)}else{callback("not enough eth")}})})})};Pxsdk.getOwnerOfNFT(tokenId,function(err,result){if(err){callback(err);return}var owner=result;if(Pxsdk.isStrEqualWithoutCase(result,fromAddress)){func(owner,fromAddress,toAddress,tokenId)}else{var _contract=Pxsdk.getContractNFT(Pxsdk.ethXNFTContract);_contract.methods.getApproved(tokenId).call({from:fromAddress}).then((result)=>{if(Pxsdk.isStrEqualWithoutCase(result,fromAddress)){func(owner,fromAddress,toAddress,tokenId)}else{callback("no approve")}})}})}catch(e){callback(e)}};Pxsdk.prototype.sellNFTBox=function(tokenIds,tokenAddress,amounts,callback){try{var fromAddress=Pxsdk.getFromAddress();Pxsdk.getApproveSellNFTs(tokenIds,0,function(err,result){if(err){callback(err);return}var _contract=Pxsdk.getContractNFTBOX(Pxsdk.ethXNFTContract);_contract.methods.isApprovedForAll(fromAddress,Pxsdk.ethEscrowBoxContract).call({from:fromAddress}).then((result)=>{if(result){Pxsdk.getBalanceEth(fromAddress,function(err,data){if(err){callback(err);return}web3.eth.getTransactionCount(fromAddress).then((result)=>{var _nonce=web3.utils.toHex(result);var _contract=Pxsdk.getContractESCROWBOX(Pxsdk.ethEscrowBoxContract);web3.eth.getGasPrice().then((result)=>{var _gasPrice=result;if(data*1>=web3.utils.fromWei(window.gasLimit*tokenIds.length*_gasPrice+"","ether")*1){var _data={from:fromAddress,to:Pxsdk.ethEscrowBoxContract,gasPrice:web3.utils.toHex(_gasPrice),gas:web3.utils.toHex(window.gasLimit*tokenIds.length),data:_contract.methods.sellNFTBox(Pxsdk.ethXNFTContract,tokenIds,tokenAddress,amounts).encodeABI(),nonce:_nonce,value:0};Pxsdk.sendTransaction(_data,callback)}else{callback("not enough eth")}})})})}else{callback("no approve")}})})}catch(e){callback(e)}};Pxsdk.prototype.pullNFTBox=function(boxId,callback){try{var fromAddress=Pxsdk.getFromAddress();Pxsdk.getOwnerOfNFTBox(boxId,function(err,result){if(err){callback(err);return}if(result!=Pxsdk.ethContract){Pxsdk.getBalanceEth(fromAddress,function(err,data){if(err){callback(err);return}Pxsdk.getTokenIdsOfNFTBox(boxId,function(err,result){if(err){callback(err);return}var len=result.length;web3.eth.getTransactionCount(fromAddress).then((result)=>{var _nonce=web3.utils.toHex(result);var _contract=Pxsdk.getContractESCROWBOX(Pxsdk.ethEscrowBoxContract);web3.eth.getGasPrice().then((result)=>{var _gasPrice=result;if(data*1>=web3.utils.fromWei(window.gasLimit*len*_gasPrice+"","ether")*1){var _data={from:fromAddress,to:Pxsdk.ethEscrowBoxContract,gasPrice:web3.utils.toHex(_gasPrice),gas:web3.utils.toHex(window.gasLimit*len),data:_contract.methods.pullNFTBox(Pxsdk.ethXNFTContract,boxId).encodeABI(),nonce:_nonce,value:0};Pxsdk.sendTransaction(_data,callback)}else{callback("not enough eth")}})})})})}else{callback("no escrow")}})}catch(e){callback(e)}};Pxsdk.prototype.buyNFTBox=function(boxId,callback){try{var fromAddress=Pxsdk.getFromAddress();var func=function(fromAddress,boxId,amount,len){Pxsdk.getBalanceEth(fromAddress,function(err,data){if(err){callback(err);return}web3.eth.getTransactionCount(fromAddress).then((result)=>{var _nonce=web3.utils.toHex(result);var _contract=Pxsdk.getContractESCROWBOX(Pxsdk.ethEscrowBoxContract);web3.eth.getGasPrice().then((result)=>{var _gasPrice=result;if(data*1>=web3.utils.fromWei((window.gasLimit*len*_gasPrice+amount*1)+"","ether")*1){var _data={from:fromAddress,to:Pxsdk.ethEscrowBoxContract,gasPrice:web3.utils.toHex(_gasPrice),gas:web3.utils.toHex(window.gasLimit*len),data:_contract.methods.buyNFTBox(Pxsdk.ethXNFTContract,boxId).encodeABI(),nonce:_nonce,value:(amount>0)?web3.utils.toHex(amount):0};Pxsdk.sendTransaction(_data,callback)}else{callback("not enough eth")}})})})};Pxsdk.getOwnerOfNFTBox(boxId,function(err,result){if(err){callback(err);return}if(result!=Pxsdk.ethContract){var _contract=Pxsdk.getContractESCROWBOX(Pxsdk.ethEscrowBoxContract);_contract.methods.getAmountsBox(boxId).call({from:fromAddress}).then((result)=>{var _amount=0;var _len=result.length;for(var i=0;i<result.length;i++){_amount+=result[i]*1}_contract.methods.getTokenAddressBox(boxId).call({from:fromAddress}).then((result)=>{if(result==Pxsdk.ethContract){func(fromAddress,boxId,_amount,_len)}else{var _contract=Pxsdk.getContractERC20(result);_contract.methods.allowance(fromAddress,Pxsdk.ethTransferBoxContract).call({from:fromAddress}).then((result)=>{if(result*1>=_amount*1){func(fromAddress,boxId,0,_len)}else{callback("no approve")}})}})})}else{callback("no escrow")}})}catch(e){callback(e)}};Pxsdk.prototype.init=function(url,callback){window.serverUrl=url;var that=this;var func=function(accounts){var _web3=new Web3();_web3.setProvider(window.provider);web3=_web3;if(accounts){web3.eth.defaultAccount=accounts[0];window.fromAddress=accounts[0];callback(null,accounts[0])}else{callback("User not login")}};if(typeof window.ethereum==="undefined"){callback("Please install MetaMask")}else{window.chainId=ethereum.networkVersion;ethereum.enable().catch(function(reason){if(reason==="User rejected provider access"){callback("Please approve")}else{callback("error")}}).then(function(accounts){func(accounts)});ethereum.on("networkChanged",function(networkID){window.chainId=networkID;that.chooseNetwork(function(err,result){if(err){return}that.updateContracts(result)})});ethereum.on("accountsChanged",function(accounts){if(accounts&&window.fromAddress==accounts[0]){return}func(accounts)})}};Pxsdk.prototype.sendSign=function(callback){try{if(web3.eth==undefined||web3.currentProvider==undefined){console.log("web3 error");return}var nonce=Math.floor(Math.random()*window.gasLimit)+"";web3.currentProvider.sendAsync({id:1,method:'personal_sign',params:[web3.utils.utf8ToHex(nonce),window.fromAddress.toLowerCase()]},function(err,result){if(err){callback(err);return}callback(null,{nonce:nonce,address:window.fromAddress.toLowerCase(),signature:result.result})})}catch(e){callback(e)}};Pxsdk.prototype.send=function(urls,types,header,data,callback){try{$.ajax({url:urls,headers:header,type:types,processData:false,contentType:"application/json; charset=utf-8",data:data,success:function(data){if(data.code==200){callback(null,data.data)}else{callback(data.msg)}},error:function(err){callback(err.statusText)}})}catch(e){callback(e)}};Pxsdk.prototype.login=function(access_key,playerId,address,nonce,signature,callback){var that=this;this.send(window.serverUrl+"player/wallet/login","post",{access_key:access_key},JSON.stringify({"address":address,"nonce":nonce,"playerId":playerId,"signature":signature}),function(err,result){if(err){callback(err);return}window.sdkToken="Bearer "+result;callback(err,result);that.chooseNetwork(function(err,result){if(err){return}that.updateContracts(result)})})};Pxsdk.prototype.getNFTList=function(callback){if(window.sdkToken){this.send(window.serverUrl+"player/NFT/list","get",{authorization:window.sdkToken},null,callback)}else{callback("no login")}};Pxsdk.prototype.getNFTByTokenId=function(tokenId,callback){if(window.sdkToken){this.send(window.serverUrl+"player/NFT/token/"+tokenId,"get",{authorization:window.sdkToken},null,callback)}else{callback("no login")}};Pxsdk.prototype.getNFTByPlayer=function(callback){if(window.sdkToken){this.send(window.serverUrl+"player/NFT/assets/list","get",{authorization:window.sdkToken},null,callback)}else{callback("no login")}};Pxsdk.prototype.chooseNetwork=function(callback){if(window.sdkToken){this.send(window.serverUrl+"player/get/address/"+window.chainId,"get",{authorization:window.sdkToken},null,callback)}else{callback("no login")}};Pxsdk.prototype.getCurrTokenList=function(callback){if(window.sdkToken){this.chooseNetwork(function(err,result){callback(err,result.tokenList)})}else{callback("no login")}};